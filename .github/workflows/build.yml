name: Build

on:
  push:
    branches:
      - 'master'
      - 'main'
  schedule:
    - cron: '0 0 1 * *'
# Run monthly, at 00:00 on the 1st day of month.
#    tags:
#      - 'v*.*.*'
  pull_request:
    branches:
      - 'dev'
      - 'testing'

# permissions are needed if pushing to ghcr.io
permissions:
  packages: write

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKER: index.docker.io
  GH_IMAGE_NAME: ghcr.io/${{ github.repository }}
  DH_IMAGE_NAME: index.docker.io/thefoundation
  CI_REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  BUILDCACHE: ghcr.io/${{ github.repository_owner }}/buildcache
  PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8"

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
######  upstream:
######    runs-on: ubuntu-latest
######    environment: build
######    permissions:
######      packages: read
######      contents: read
######    if: github.repository_owner == 'TheFoundation'
######    steps:
######      - uses: actions/checkout@v3
######      - name: prep-downstream
######        run: |
######             mkdir downstream
######             cp -aurv _build_hocker.sh .github downstream &
######             tar cv . |md5sum |cut -d" " -f1 > downstream/.md5sum_of_tar
######             bash build/_generate_downstream_readme.sh thefoundation-builder hocker-builder-github > downstream/README.md
######             wait
#######      - uses: cpina/github-action-push-to-another-repository@main
######      - uses: TheFoundation/github-action-push-to-another-repository@main
######        env:
######          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
#######          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
######        with:
######          source-directory: 'downstream'
######          destination-github-username: 'thefoundation-builder'
######          destination-repository-name: 'hocker-builder-github'
######          user-email: actions@github.com
######          target-branch: main

  build-base-go:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}

    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: current images
        run: docker image ls
      - name: build images
#        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh base-focal "
        run: git clone https://github.com/umputun/baseimage.git /tmp/baseimage && cd /tmp/baseimage && 	docker buildx build --platform ${PLATFORMS}  --pull --cache-to=type=registry,ref=$BUILDCACHE:baseimage_buildgo --cache-from=type=registry,ref=$BUILDCACHE:baseimage_buildgo -t $CI_REGISTRY_IMAGE:baseimage_buildgo build.go -f build.go/Dockerfile
      - name: show files
#        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
        run: docker image ls 
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-base-go:
    runs-on: ubuntu-latest
    needs: build-base-go
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull $CI_REGISTRY_IMAGE:baseimage_buildgo;docker image ls "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '$CI_REGISTRY_IMAGE:baseimage_buildgo'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-base-mailhog:
    runs-on: ubuntu-latest
    needs: build-base-go
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}

    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
#        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh base-focal "
        run: git clone https://github.com/mailhog/MailHog.git /tmp/mailhog && cd /tmp/mailhog && 	docker buildx build --platform ${PLATFORMS}  --pull --cache-to=type=registry,ref=$BUILDCACHE:mailhog --cache-from=type=registry,ref=$BUILDCACHE:mailhog -t $CI_REGISTRY_IMAGE:mailhog build.go -f build.go/Dockerfile
      - name: show files
#        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
        run: docker image ls 
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  build-base-webmentiond:
    runs-on: ubuntu-latest
    needs: build-base-go
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
#        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh base-focal "
        run: git clone https://github.com/zerok/webmentiond.git /tmp/webmentiond && cd /tmp/webmentiond && 	docker buildx build --platform ${PLATFORMS}  --pull --cache-to=type=registry,ref=$BUILDCACHE:webmentiond --cache-from=type=registry,ref=$BUILDCACHE:webmentiond -t $CI_REGISTRY_IMAGE:webmentiond build.go -f build.go/Dockerfile
      - name: show files
#        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
        run: docker image ls 
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  build-remark42:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-go , build-base-webmentiond ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
#        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php5 "
        run: git clone https://github.com/umputun/remark42.git &&  /tmp/remark42 &&  cd /tmp/remark42 && sed 's~^FROM umputun/baseimage:buildgo.\+~FROM '$CI_REGISTRY_IMAGE:baseimage_buildgo'~g;s~FROM.\+:webmentiond~'$CI_REGISTRY_IMAGE:webmentiond build.go'~g;s~FROM.\+:mailhog~'$CI_REGISTRY_IMAGE:mailhog build.go'~g' -i Dockerfile && docker-buildx build       --platform ${PLATFORMS}      --tag $CI_REGISTRY_IMAGE:remark42-multiarch       -f Dockerfile --push  . 
      - name: show files
        #run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
        run: docker image ls 
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-remark42:
    runs-on: ubuntu-latest
    needs:  [  build-base-mailhog , build-remark42 ]
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull $CI_REGISTRY_IMAGE:remark42-multiarch ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "$CI_REGISTRY_IMAGE:remark42-multiarch"
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

#    - name: go to repo and build
#      run: sudo /bin/bash -c "cd Hocker;/bin/bash _build.hocker.sh base-bionic"
#            !build/**/*.md
###    - name: Login
###      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
###    - name: Run Buildx
###      env:
##         EZORED_AWS_KEY_ID: ${{ secrets.EZORED_AWS_KEY_ID }}
##         EZORED_AWS_SECRET_KEY: ${{ secrets.EZORED_AWS_SECRET_KEY }}
###      run: |
###       docker buildx build -f Dockerfile -t ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest --output "type=image,push=true" --platform linux/amd64,linux/arm/v7,linux/arm64 .
##





